Notes for my password game
--------------------------
Date: 2022-08-11
Updated: 2022-08-22


Notes:

2022-08-11
I want to make a simple game in C, were you get random letters,
numbers, and other display characters outputted to the console
window. Then you write the text back as input without looking at
the keyboard (or just closing your eyes).
There can be different difficulty levels where the easiest one is
just a simple "hello", to where the most diffuclt is 10-20 characters
long with random characters displayed to the screen.

2022-08-21
When implementing the termius struct for allowing getchar() to read
from stdin without needing an ENTER key push, I also removed the
ability to delete typed inputs.
I might be able to use this as part of the game...?


2022-08-22
Thinking on how to implement a high score. The high score needs to be
saved in a .txt file, the high score function needs to use a loop that
reads and prints the data in the .txt file. This way the high score list,
menu option 4, will always be dynamically loaded. I need an INT for the
score, a char array for the string of the person who got the high score.
This means that the high score will be local to the users computer only.


Forseen difficulties:
- making the input be invisible for the user. If the user can see what
  they are typing, it becomes much easier to backtrack and re-write
  your input.


Possible features:
- several difficulty levels
- ability to save/load your game


Feature requests:
- When I make a mistake, I want the program to tell me WHAT
  I did wrong
- For every correct guess I want the program to keep my score
  and show me my score
- When quitting, make a nicer exit screen
 - DONE
- When failing make a nice failing screen
 - DONE
- Show the words in colors for easier reading

Bugs:
- When force quitting out [CTRL + C] and the ANSI escape sequence has NOT
  received it's reveal command, the BASH shell will LOSE it's
  blinking cursor! Difficulty function: Line 93 and 113

Algorithm:
- Output "random" characters to the screen
- store users input and compare to the output
- if they match, declare success
- if the input is different, declare failure


Updates:
- Added a nicer quitting screen when exiting 	/2022-08-17

- Added arrow key controlled menu selection 	
- Added invisible input for the main game 
  password guessing screen			/2022-08-21

/Per Stoor
